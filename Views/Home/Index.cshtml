@model WeatherApplicationLIA.ViewModels.LocationWeatherViewModel;

@{
    ViewData["Title"] = "Home Page";
}

<div class="weather-container">
    <div class="text-center">
        <h1 class="display-4">Väderprognos</h1>
        <form asp-action="Index" method="post">
            <div class="form-group">
                <div class="weather-display">
                    <i id="weather-icon" class="wi" style="font-size: 50px; margin-right: 10px;"></i>
                    <span id="temperature" class="display-4">-- °C</span>
                </div>
                <label for="locationSelect" class="h5 mt-4">Välj en stad:</label>
                <select class="form-control" id="locationSelect" name="SelectedLocation">
                    <option value="">-- Välj en lokation --</option>
                    <option value="stockholm" selected="@(Model.SelectedLocation == "stockholm")">Stockholm</option>
                    <option value="gothenburg" selected="@(Model.SelectedLocation == "gothenburg")">Göteborg</option>
                    <option value="malmo" selected="@(Model.SelectedLocation == "malmo")">Malmö</option>
                    <option value="uppsala" selected="@(Model.SelectedLocation == "uppsala")">Uppsala</option>
                    <option value="vasteras" selected="@(Model.SelectedLocation == "vasteras")">Västerås</option>
                </select>
            </div>
        </form>

        <div class="map-container">
            <div id="map" style="width: 100%; height: 300px;">
                <p>@Model.MapLocation</p>
            </div>
        </div>

        <!-- Lägg till datum- och tidsväljaren här -->
        <div class="date-time-selector-container mt-4">
            <label for="dateSelect" class="h5">Välj datum:</label>
            <input type="date" id="dateSelect" class="form-control" min="{{ today }}" max="{{ nineDaysAhead }}">

            <button id="getTemperature" class="btn btn-primary mt-3">Visa temperatur</button>
        </div>
    </div>
</div>

<div class="forecast-container">
    <h3>Temperatur för valda datumet</h3>
    <div id="forecast-date" class="forecast-date">Datum: --</div>
    <div id="hourly-temperature-row" class="d-flex justify-content-center"></div>
</div>

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="~/css/weather-icons.css">

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCXsPiPvGQBlVn_gUR-lj8geNaBYF0YPVg&callback=initMap" async defer></script>

<script>
    let map;
    let marker;

    function initMap() {
        const initialPosition = { lat: 59.3293, lng: 18.0686 }; // Stockholm som standard
        map = new google.maps.Map(document.getElementById("map"), {
            center: initialPosition,
            zoom: 10,
        });

        marker = new google.maps.Marker({
            position: initialPosition,
            map: map,
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("locationSelect").addEventListener("change", function () {
            const location = this.value;
            updateMap(location);
        });

        document.getElementById("getTemperature").addEventListener("click", function () {
            const selectedDate = document.getElementById("dateSelect").value;
            const location = document.getElementById("locationSelect").value;

            if (selectedDate && location) {
                fetch(`/Home/GetTemperatureForSelectedDate?location=${location}&date=${selectedDate}`)
                    .then(response => response.text())
                    .then(data => {
                        console.log("Data fetched from server:", data);

                        if (data === "Ingen data|wi-na") {
                            alert("Ingen väderdata tillgänglig för det valda datumet.");
                            return;
                        }

                        document.getElementById("forecast-date").textContent = `Datum: ${selectedDate}`;
                        const hourlyTemperatureRow = document.getElementById("hourly-temperature-row");
                        hourlyTemperatureRow.innerHTML = "";

                        const hourlyDataArray = data.split(", ");
                        hourlyDataArray.forEach(hourData => {
                            const [timeTemp, iconClass] = hourData.split("|");
                            if (timeTemp && iconClass) {
                                const [time, temperature] = timeTemp.split(": ");

                                const hourItem = document.createElement("div");
                                hourItem.classList.add("hour-item", "text-center");
                                hourItem.innerHTML = `
                                    <i class="wi ${iconClass.trim()}" style="font-size: 50px;"></i>
                                    <div class="hour">${new Date(time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                                    <div class="temp">${temperature}</div>
                                `;
                                hourlyTemperatureRow.appendChild(hourItem);
                            }
                        });
                    })
                    .catch(error => console.error("Error fetching temperature data:", error));
            } else {
                alert("Vänligen välj ett datum och en plats.");
            }
        });
    });

    function updateMap(location) {
    const coordinates = {
        stockholm: { lat: 59.3293, lng: 18.0686 },
        gothenburg: { lat: 57.7089, lng: 11.9746 },
        malmo: { lat: 55.6050, lng: 13.0038 },
        uppsala: { lat: 59.8586, lng: 17.6389 },
        vasteras: { lat: 59.6162, lng: 16.5528 }
    };

    if (coordinates[location]) {
        const newPosition = coordinates[location];
        map.setCenter(newPosition);
        marker.setPosition(newPosition);

        // Hämta aktuell temperatur för vald plats och uppdatera högst upp på sidan
        fetch(`/Home/GetWeatherTemperatureNow?location=${location}`)
            .then(response => response.text())
            .then(data => {
                console.log("Current temperature data fetched:", data);

                const [temperature, iconClass] = data.split('|');
                document.querySelector('#temperature').textContent = `${temperature}`;
                document.querySelector('#weather-icon').className = `wi ${iconClass}`;
            })
            .catch(error => console.error('Error fetching current temperature:', error));
    }
}
</script>