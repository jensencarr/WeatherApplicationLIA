@model WeatherApplicationLIA.ViewModels.LocationWeatherViewModel;

@{
    ViewData["Title"] = "Home Page";
}

<div class="weather-container">
    <div class="text-center">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="display-4">Väderprognos</h1>
            <select class="unit-select ml-3" id="unitSelect" onchange="changeUnit(this.value)">
                <option value="C">Celsius</option>
                <option value="F">Fahrenheit</option>
            </select>
        </div>
        
        <form asp-action="Index" method="post">
            <div class="form-group">
                <div class="weather-display">
                    <i id="weather-icon" class="wi" style="font-size: 50px; margin-right: 10px;"></i>
                    <span id="temperature" class="display-4">--</span>
                </div>
                <label for="locationSelect" class="h5 mt-4">Välj en stad:</label>
                <select class="form-control" id="locationSelect" name="SelectedLocation">
                    <option value="">-- Välj en lokation --</option>
                    <option value="stockholm" selected="@(Model.SelectedLocation == "stockholm")">Stockholm</option>
                    <option value="gothenburg" selected="@(Model.SelectedLocation == "gothenburg")">Göteborg</option>
                    <option value="malmo" selected="@(Model.SelectedLocation == "malmo")">Malmö</option>
                    <option value="uppsala" selected="@(Model.SelectedLocation == "uppsala")">Uppsala</option>
                    <option value="vasteras" selected="@(Model.SelectedLocation == "vasteras")">Västerås</option>
                    <option value="orebro" selected="@(Model.SelectedLocation == "orebro")">Örebro</option>
                    <option value="helsingborg" selected="@(Model.SelectedLocation == "helsingborg")">Helsingborg</option>
                    <option value="jonkoping" selected="@(Model.SelectedLocation == "jonkoping")">Jönköping</option>
                    <option value="norrkoping" selected="@(Model.SelectedLocation == "norrkoping")">Norrköping</option>
                    <option value="lund" selected="@(Model.SelectedLocation == "lund")">Lund</option>
                    <option value="umea" selected="@(Model.SelectedLocation == "umea")">Umeå</option>
                    <option value="gavle" selected="@(Model.SelectedLocation == "gavle")">Gävle</option>
                    <option value="kiruna" selected="@(Model.SelectedLocation == "kiruna")">Kiruna</option>
                    <option value="ornskoldsvik" selected="@(Model.SelectedLocation == "ornskoldsvik")">Örnsköldsvik</option>
                </select>
            </div>
        </form>

        <div class="map-container">
            <div id="map" style="width: 100%; height: 300px;">
                <p>@Model.MapLocation</p>
            </div>
        </div>

        <!-- Lägg till datum- och tidsväljaren här -->
        <div class="date-time-selector-container mt-4">
            <label for="dateSelect" class="h5">Välj datum:</label>
            <input type="date" id="dateSelect" class="form-control" min="{{ today }}" max="{{ nineDaysAhead }}">

            <button id="getTemperature" class="btn btn-primary mt-3">Visa temperatur</button>
        </div>
    </div>
</div>

<div class="forecast-container">
    <h2 class="forecast-title">Temperatur för valda datumet</h2>
    <div id="forecast-date">Datum: --</div>
    <div id="hourly-temperature-row" class="hourly-forecast"></div>
</div><

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="~/css/weather-icons.css">

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCXsPiPvGQBlVn_gUR-lj8geNaBYF0YPVg&callback=initMap" async defer></script>

<script>
    
let currentUnit = 'C';
let map;
let marker;

function initMap() {
    const initialPosition = { lat: 59.3293, lng: 18.0686 }; // Stockholm som standard
    map = new google.maps.Map(document.getElementById("map"), {
        center: initialPosition,
        zoom: 10,
    });

    marker = new google.maps.Marker({
        position: initialPosition,
        map: map,
    });
}

function changeUnit(unit) {
    if (unit === currentUnit) return; // Kontrollera om det redan är rätt enhet
    currentUnit = unit;
    convertDisplayedTemperatures(unit);
}

function convertTemperature(tempC, toUnit) {
    return toUnit === 'F' ? (tempC * 9 / 5 + 32).toFixed(1) : tempC;
}

function convertDisplayedTemperatures(toUnit) {
    // Uppdatera den aktuella temperaturen högst upp
    const temperatureElement = document.getElementById('temperature');
    let originalTempC = parseFloat(temperatureElement.getAttribute('data-original-temp'));
    if (!isNaN(originalTempC)) {
        const convertedTemp = convertTemperature(originalTempC, toUnit);
        temperatureElement.textContent = `${convertedTemp} °${toUnit}`;
    }

    // Uppdatera temperaturerna i tabellen
    const tempElements = document.querySelectorAll('#hourly-temperature-row .temp');
    tempElements.forEach(element => {
        let originalTemp = parseFloat(element.getAttribute('data-original-temp'));
        if (!isNaN(originalTemp)) {
            element.textContent = `${convertTemperature(originalTemp, toUnit)} °${toUnit}`;
        }
    });
}

document.addEventListener("DOMContentLoaded", function () {
    document.getElementById("locationSelect").addEventListener("change", function () {
        const location = this.value;
        updateMap(location);
    });

    document.getElementById("unitSelect").addEventListener("change", function () {
        const selectedUnit = this.value;
        changeUnit(selectedUnit); // Uppdaterar temperaturer direkt
    });

    document.getElementById("getTemperature").addEventListener("click", function () {
    const selectedDate = document.getElementById("dateSelect").value;
    const location = document.getElementById("locationSelect").value;

    if (selectedDate && location) {
        document.getElementById("forecast-date").textContent = `Datum: ${selectedDate}`;

        fetch(`/Home/GetTemperatureForSelectedDate?location=${location}&date=${selectedDate}`)
            .then(response => response.text())
            .then(data => {
                const hourlyTemperatureRow = document.getElementById("hourly-temperature-row");
                hourlyTemperatureRow.innerHTML = "";

                const hourlyDataArray = data.split(", ");
                hourlyDataArray.forEach(hourData => {
                const [timeTempWind, iconClass] = hourData.split("|");
                const [time, temperature, windSpeed, windDirection, precipitation] = timeTempWind.split(",");

                // Skapa varje timme-prognos med `data-original-temp` för att möjliggöra konvertering
                const hourItem = document.createElement("div");
                hourItem.classList.add("hour-item");

                hourItem.innerHTML = `
                    <div class="hour">${new Date(time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                    <i class="wi ${iconClass.trim()}" style="font-size: 2rem; display: block;"></i>
                    <div class="temp" data-original-temp="${temperature}">${parseFloat(temperature).toFixed(1)} °C</div>
                    <div class="wind-speed">Wind: ${parseFloat(windSpeed).toFixed(1)} m/s</div>
                    <div class="wind-direction">Direction: ${parseFloat(windDirection).toFixed(1)}°</div>
                    <div class="precipitation">Precipitation: ${parseFloat(precipitation).toFixed(1)} mm</div>
                `;

                hourlyTemperatureRow.appendChild(hourItem);
            });
            })
            .catch(error => console.error("Error fetching temperature data:", error));
    } else {
        alert("Vänligen välj ett datum och en plats.");
    }
});


});

function updateMap(location) {
    const coordinates = {
        stockholm: { lat: 59.3293, lng: 18.0686 },
        gothenburg: { lat: 57.7089, lng: 11.9746 },
        malmo: { lat: 55.6050, lng: 13.0038 },
        uppsala: { lat: 59.8586, lng: 17.6389 },
        vasteras: { lat: 59.6162, lng: 16.5528 },
        orebro: { lat: 59.2741, lng: 15.2066 },
        helsingborg: { lat: 56.0465, lng: 12.6945 },
        jonkoping: { lat: 57.7815, lng: 14.1562 },
        norrkoping: { lat: 58.5877, lng: 16.1924 },
        lund: { lat: 55.7047, lng: 13.1910 },
        umea: { lat: 63.8258, lng: 20.2630 },
        gavle: { lat: 60.6749, lng: 17.1413 },
        kiruna: { lat: 67.8557, lng: 20.2253 },
        ornskoldsvik: { lat: 63.2909, lng: 18.7152 }
    };

    if (coordinates[location]) {
        const newPosition = coordinates[location];
        map.setCenter(newPosition);
        marker.setPosition(newPosition);

        fetch(`/Home/GetWeatherTemperatureNow?location=${location}`)
            .then(response => response.text())
            .then(data => {
                const [temperature, iconClass] = data.split('|');

                // Skapa eller uppdatera texten ovanför temperatur och ikon
                let tempHeader = document.getElementById('temp-header');
                if (!tempHeader) {
                    tempHeader = document.createElement('h3'); // Skapa en h3 istället för en div
                    tempHeader.id = 'temp-header';
                    tempHeader.style.fontWeight = 'bold';
                    tempHeader.style.marginBottom = '10px';
                    tempHeader.textContent = 'Temperatur nu';
                    
                    // Lägg till h3-rubriken i .form-group istället för .weather-display
                    document.querySelector('.form-group').prepend(tempHeader);
                }
                document.querySelector('#temperature').setAttribute('data-original-temp', temperature); // Spara originalvärdet
                document.querySelector('#temperature').textContent = `${convertTemperature(parseFloat(temperature), currentUnit)} °${currentUnit}`;
                document.querySelector('#weather-icon').className = `wi ${iconClass}`;
            })
            .catch(error => console.error('Error fetching current temperature:', error));
    }
}
</script>