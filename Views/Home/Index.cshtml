@model WeatherApplicationLIA.ViewModels.LocationWeatherViewModel;

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Välj en lokation</h1>
    <form asp-action="Index" method="post">
        <div class="form-group mt-4">
            <!-- Temperatur och ikon visas här -->
            <div class="d-flex align-items-center justify-content-center">
                <!-- Använd i-tag för att lägga till ikonen som CSS-klass -->
                <i id="weather-icon" class="wi" style="font-size: 50px; margin-right: 10px;"></i>
                <span id="temperature" class="display-4">-- °C</span>
            </div>
            <label for="locationSelect" class="h5 mt-4">Välj en stad:</label>
            <select class="form-control w-50 mx-auto" id="locationSelect" name="SelectedLocation">
                <option value="">-- Välj en lokation --</option>
                <option value="stockholm" selected="@(Model.SelectedLocation == "stockholm")">Stockholm</option>
                <option value="gothenburg" selected="@(Model.SelectedLocation == "gothenburg")">Göteborg</option>
                <option value="malmo" selected="@(Model.SelectedLocation == "malmo")">Malmö</option>
                <option value="uppsala" selected="@(Model.SelectedLocation == "uppsala")">Uppsala</option>
                <option value="vasteras" selected="@(Model.SelectedLocation == "vasteras")">Västerås</option>
            </select>
        </div>
    </form>

    <div class="d-flex justify-content-center mt-4">
        <div id="map" style="width: 300px; height: 300px;">
            <p>@Model.MapLocation</p>
        </div>
    </div>
    <div class="text-center mt-4">
    <h3>Kommande 8 timmars temperatur</h3>
    <div id="hourly-temperature-row" class="d-flex justify-content-center"></div>
</div>

</div>

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="~/css/weather-icons.css">

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCXsPiPvGQBlVn_gUR-lj8geNaBYF0YPVg&callback=initMap" async defer></script>


<script>
    let map;
    let marker;

    function initMap() {
        // Starta kartan med Stockholm som standard
        const initialPosition = { lat: 59.3293, lng: 18.0686 };
        map = new google.maps.Map(document.getElementById("map"), {
            center: initialPosition,
            zoom: 10,
        });

        marker = new google.maps.Marker({
            position: initialPosition,
            map: map,
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        // Lyssna på ändringar i platsväljaren och uppdatera kartan
        document.getElementById("locationSelect").addEventListener("change", function () {
            const location = this.value;
            updateMap(location);
        });
    });


    function updateMap(location) {
    const coordinates = {
        stockholm: { lat: 59.3293, lng: 18.0686 },
        gothenburg: { lat: 57.7089, lng: 11.9746 },
        malmo: { lat: 55.6050, lng: 13.0038 },
        uppsala: { lat: 59.8586, lng: 17.6389 },
        vasteras: { lat: 59.6162, lng: 16.5528 }
    };

    if (coordinates[location]) {
        const newPosition = coordinates[location];
        map.setCenter(newPosition);
        marker.setPosition(newPosition);

        // Hämta väderdata för den valda platsen
        fetch(`/Home/GetWeatherTemperatureNow?location=${location}`)
    .then(response => response.text())
    .then(data => {

        const [temperature, iconClass] = data.split('|');
        document.querySelector('#temperature').textContent = `${temperature}`;
        document.querySelector('#weather-icon').className = `wi ${iconClass}`;
    })
    .catch(error => console.error('Error fetching weather data:', error));

    // Hämta och visa timvisa temperaturer
    updateHourlyTemperatures(location);
    }

    function updateHourlyTemperatures(location) {
    fetch(`/Home/GetHourlyTemperatures?location=${location}`)
        .then(response => response.text())
        .then(data => {
            const rowContainer = document.getElementById('hourly-temperature-row');
            rowContainer.innerHTML = ''; // Rensa tidigare data

            // Dela upp den mottagna data-strängen
            const hourlyData = data.split(', '); // Antar att varje timdata är separerad med ", "
            
            hourlyData.forEach(entry => {
                const [time, temp] = entry.split(': '); // Antar att varje par är separerat av ": "

                // Skapa en container för varje timme
                const hourContainer = document.createElement('div');
                hourContainer.classList.add('hour-item', 'text-center');
                hourContainer.style.margin = "0 10px";
                hourContainer.innerHTML = `
                    <div class="hour">${time}</div>
                    <div class="temp">${temp}</div>
                `;

                rowContainer.appendChild(hourContainer);
            });
        })
        .catch(error => console.error('Error fetching hourly temperatures:', error));
}
}

</script>